{"version":3,"file":"esm-loader-manager.mjs","sources":["../src/utilities.js","../src/index.js"],"sourcesContent":["import { readdir } from 'node:fs/promises';\nimport { readFile } from 'node:fs/promises';\nimport { relative as getRelativePath } from 'node:path';\nimport { resolve as resolvePath } from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nasync function loadURL( url ) {\n\tconst path = fileURLToPath( url );\n\n\treturn readFile( path );\n}\n\nasync function resolveProjectRoot( startDir ) {\n\tconst files = await readdir( startDir );\n\n\tif ( files.includes( 'package.json' ) ) {\n\t\treturn startDir;\n\t}\n\n\tconst dirUp = resolvePath( startDir, '..' );\n\n\t// If directory one level up is the same as the current on,\n\t// we're at / and there's nowhere to go up.\n\tif ( dirUp === startDir ) {\n\t\treturn null;\n\t}\n\n\treturn resolveProjectRoot( dirUp );\n}\n\nconst configFileName = '.esmlmrc';\nconst configFileExtensions = [\n\t'.js',\n\t'.mjs'\n];\n\nasync function resolveConfigFile( startDir, projectRoot ) {\n\tconst files = await readdir( startDir );\n\n\tfor ( const extension of configFileExtensions ) {\n\t\tconst configFileFullName = `${ configFileName }${ extension }`;\n\n\t\tif ( files.includes( configFileFullName ) ) {\n\t\t\tconst resolvedConfigFilePath = resolvePath( startDir, configFileFullName );\n\n\t\t\treturn resolvedConfigFilePath;\n\t\t}\n\t}\n\n\t// Do not go outside of the project root.\n\tif ( startDir === projectRoot ) {\n\t\treturn null;\n\t}\n\n\tconst dirUp = resolvePath( startDir, '..' );\n\n\treturn resolveConfigFile( dirUp );\n}\n\nfunction isInsideDir( dir, path ) {\n\tconst filePath = path.startsWith( 'file://' ) ? fileURLToPath( path ) : path;\n\tconst relativePath = getRelativePath( dir, filePath );\n\n\t// https://www.golinuxcloud.com/if-path-is-subdirectory-of-another-nodejs/\n\treturn !relativePath.startsWith( '..' );\n}\n\nfunction isInsideNodeModules( pathOrURL ) {\n\tconst npmModulesPathRegex = /[/\\\\]node_modules[/\\\\]/gi;\n\n\treturn npmModulesPathRegex.test( pathOrURL );\n}\n\nfunction isBuiltInModule( { url, format } ) {\n\tif ( format ) {\n\t\treturn format === 'builtin';\n\t}\n\n\treturn url.startsWith( 'node:' );\n}\n\nexport { loadURL };\nexport { resolveProjectRoot };\nexport { resolveConfigFile };\nexport { isInsideDir };\nexport { isInsideNodeModules };\nexport { isBuiltInModule };\n","/* eslint-disable no-console */\n\nimport { existsSync as fileExists } from 'node:fs';\nimport { resolve as resolvePath } from 'node:path';\nimport { cwd as processCWD } from 'node:process';\nimport { env as processEnv } from 'node:process';\nimport { pathToFileURL } from 'node:url';\nimport { isBuiltInModule } from './utilities.js';\nimport { isInsideDir } from './utilities.js';\nimport { isInsideNodeModules } from './utilities.js';\nimport { resolveConfigFile } from './utilities.js';\nimport { resolveProjectRoot } from './utilities.js';\nimport { loadURL } from './utilities.js';\n\nconst cwd = processCWD();\nconst resolvedProjectRoot = await resolveProjectRoot( cwd );\n\nif ( !resolvedProjectRoot ) {\n\tconsole.warn( 'ESMLM: The project root was not detected. Falling back to the CWD.' );\n}\n\nconst projectRoot = resolvedProjectRoot || cwd;\nconst loaderFileName = 'ESMLM_CONFIG' in processEnv ? processEnv.ESMLM_CONFIG :\n\tawait resolveConfigFile( cwd, projectRoot );\nconst loaderPath = loaderFileName ? resolvePath( cwd, loaderFileName ) : null;\nlet loaders = [];\n\nif ( loaderPath && fileExists( loaderPath ) ) {\n\tconst loaderURL = pathToFileURL( loaderPath );\n\tconst { default: config } = await import( loaderURL );\n\n\tloaders = config.loaders;\n} else {\n\tconsole.warn( 'ESMLM: The file with loaders\\' definition was not found.' );\n}\n\nasync function resolve( specifier, context, defaultResolve ) {\n\tconst defaultResolvedInfo = await defaultResolve( specifier, context, defaultResolve );\n\tconst { url: moduleURL } = defaultResolvedInfo;\n\n\tif ( shouldIgnoreModule( projectRoot, defaultResolvedInfo ) ) {\n\t\treturn defaultResolvedInfo;\n\t}\n\n\tconst isAnyLoaderForSpecifier = loaders.some( ( { matcher } ) => {\n\t\treturn matcher( moduleURL, context );\n\t} );\n\n\tif ( !isAnyLoaderForSpecifier ) {\n\t\treturn defaultResolvedInfo;\n\t}\n\n\treturn {\n\t\turl: moduleURL,\n\t\ttype: 'module'\n\t};\n}\n\nasync function load( url, context, defaultLoad ) {\n\tconst moduleInfo = { ...context, url };\n\n\tif ( shouldIgnoreModule( projectRoot, moduleInfo ) ) {\n\t\treturn defaultLoad( url, context, defaultLoad );\n\t}\n\n\tconst matchedLoaders = loaders.filter( ( { matcher } ) => {\n\t\treturn matcher( url, context );\n\t} );\n\n\tif ( matchedLoaders.length === 0 ) {\n\t\treturn defaultLoad( url, context, defaultLoad );\n\t}\n\n\tlet source = await loadURL( url );\n\n\tfor ( const { loader } of matchedLoaders ) {\n\t\tsource = await loader( url, source ); // eslint-disable-line no-await-in-loop\n\t}\n\n\treturn {\n\t\tformat: 'module',\n\t\tshortCircuit: true,\n\t\tsource\n\t};\n}\n\nfunction shouldIgnoreModule( projectRoot, moduleInfo ) {\n\tconst moduleURL = moduleInfo.url;\n\n\treturn isBuiltInModule( moduleInfo ) || isInsideNodeModules( moduleURL ) || !isInsideDir( projectRoot, moduleURL );\n}\n\nexport { resolve };\nexport { load };\n"],"names":["configFileExtensions","cwd","processCWD","resolvedProjectRoot","async","resolveProjectRoot","startDir","readdir","includes","dirUp","resolvePath","console","warn","projectRoot","loaderFileName","processEnv","ESMLM_CONFIG","resolveConfigFile","files","extension","configFileFullName","loaderPath","loaders","fileExists","loaderURL","pathToFileURL","default","config","import","resolve","specifier","context","defaultResolve","defaultResolvedInfo","url","moduleURL","shouldIgnoreModule","some","matcher","type","load","defaultLoad","moduleInfo","matchedLoaders","filter","length","source","path","fileURLToPath","readFile","loadURL","loader","format","shortCircuit","startsWith","isBuiltInModule","test","dir","filePath","getRelativePath","isInsideDir"],"mappings":";wPA8BA,MACMA,EAAuB,CAC5B,MACA,QCnBD,MAAMC,EAAMC,IACNC,QDHNC,eAAeC,EAAoBC,GAGlC,UAFoBC,EAASD,IAElBE,SAAU,gBACpB,OAAOF,EAGR,MAAMG,EAAQC,EAAaJ,EAAU,MAIrC,OAAKG,IAAUH,EACP,KAGDD,EAAoBI,GCZMJ,CAAoBJ,GAEhDE,GACLQ,QAAQC,KAAM,sEAGf,MAAMC,EAAcV,GAAuBF,EACrCa,EAAiB,iBAAkBC,EAAaA,EAAWC,mBDcjEZ,eAAea,EAAmBX,EAAUO,GAC3C,MAAMK,QAAcX,EAASD,GAE7B,IAAM,MAAMa,KAAanB,EAAuB,CAC/C,MAAMoB,EAAsB,WAAsBD,IAElD,GAAKD,EAAMV,SAAUY,GAAuB,CAG3C,OAF+BV,EAAaJ,EAAUc,IAOxD,OAAKd,IAAaO,EACV,KAKDI,EAFOP,EAAaJ,EAAU,OC/B/BW,CAAmBhB,EAAKY,GACzBQ,EAAaP,EAAiBJ,EAAaT,EAAKa,GAAmB,KACzE,IAAIQ,EAAU,GAEd,GAAKD,GAAcE,EAAYF,GAAe,CAC7C,MAAMG,EAAYC,EAAeJ,IACzBK,QAASC,SAAiBC,OAAQJ,GAE1CF,EAAUK,EAAOL,aAEjBX,QAAQC,KAAM,2DAGfR,eAAeyB,EAASC,EAAWC,EAASC,GAC3C,MAAMC,QAA4BD,EAAgBF,EAAWC,EAASC,IAC9DE,IAAKC,GAAcF,EAE3B,GAAKG,EAAoBvB,EAAaoB,GACrC,OAAOA,EAOR,OAJgCX,EAAQe,MAAM,EAAIC,QAAAA,KAC1CA,EAASH,EAAWJ,KAOrB,CACNG,IAAKC,EACLI,KAAM,UALCN,EAST7B,eAAeoC,EAAMN,EAAKH,EAASU,GAClC,MAAMC,EAAa,IAAKX,EAASG,IAAAA,GAEjC,GAAKE,EAAoBvB,EAAa6B,GACrC,OAAOD,EAAaP,EAAKH,EAASU,GAGnC,MAAME,EAAiBrB,EAAQsB,QAAQ,EAAIN,QAAAA,KACnCA,EAASJ,EAAKH,KAGtB,GAA+B,IAA1BY,EAAeE,OACnB,OAAOJ,EAAaP,EAAKH,EAASU,GAGnC,IAAIK,QDnEL1C,eAAwB8B,GACvB,MAAMa,EAAOC,EAAed,GAE5B,OAAOe,EAAUF,GCgEEG,CAAShB,GAE5B,IAAM,MAAMiB,OAAEA,KAAYR,EACzBG,QAAeK,EAAQjB,EAAKY,GAG7B,MAAO,CACNM,OAAQ,SACRC,cAAc,EACdP,OAAAA,GAIF,SAASV,EAAoBvB,EAAa6B,GACzC,MAAMP,EAAYO,EAAWR,IAE7B,ODhBD,UAA0BA,IAAEA,EAAFkB,OAAOA,IAChC,OAAKA,EACc,YAAXA,EAGDlB,EAAIoB,WAAY,SCWhBC,CAAiBb,IDrBI,2BAEDc,KCmBkCrB,KD9B9D,SAAsBsB,EAAKV,GAC1B,MAAMW,EAAWX,EAAKO,WAAY,WAAcN,EAAeD,GAASA,EAIxE,OAHqBY,EAAiBF,EAAKC,GAGtBJ,WAAY,MCyB4CM,CAAa/C,EAAasB"}