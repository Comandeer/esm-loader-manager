{"version":3,"file":"esm-loader-manager.mjs","sources":["../src/utilities/isInsideNodeModules.js","../src/utilities/loadURL.js","../src/utilities/resolveConfigFile.js","../src/utilities/resolveProjectRoot.js","../src/index.js","../src/utilities/isBuiltInModule.js","../src/utilities/isInsideDir.js"],"sourcesContent":["function isInsideNodeModules( pathOrURL ) {\n\tconst npmModulesPathRegex = /[/\\\\]node_modules[/\\\\]/gi;\n\n\treturn npmModulesPathRegex.test( pathOrURL );\n}\n\nexport default isInsideNodeModules;\n","import { readFile } from 'node:fs/promises';\nimport { fileURLToPath } from 'node:url';\n\nasync function loadURL( url ) {\n\tconst path = fileURLToPath( url );\n\n\treturn readFile( path );\n}\n\nexport default loadURL;\n","import { readdir } from 'node:fs/promises';\nimport { resolve as resolvePath } from 'pathe';\n\nconst configFileName = '.esmlmrc';\nconst configFileExtensions = [\n\t'.js',\n\t'.mjs'\n];\n\nasync function resolveConfigFile( startDir, projectRoot ) {\n\ttry {\n\t\tconst files = await readdir( startDir );\n\n\t\tfor ( const extension of configFileExtensions ) {\n\t\t\tconst configFileFullName = `${ configFileName }${ extension }`;\n\n\t\t\tif ( files.includes( configFileFullName ) ) {\n\t\t\t\tconst resolvedConfigFilePath = resolvePath( startDir, configFileFullName );\n\n\t\t\t\treturn resolvedConfigFilePath;\n\t\t\t}\n\t\t}\n\n\t\t// Do not go outside of the project root.\n\t\tif ( startDir === projectRoot ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst dirUp = resolvePath( startDir, '..' );\n\n\t\treturn resolveConfigFile( dirUp );\n\t} catch {\n\t\treturn null;\n\t}\n}\n\nexport default resolveConfigFile;\n","import { readdir } from 'node:fs/promises';\nimport { resolve as resolvePath } from 'pathe';\n\nasync function resolveProjectRoot( startDir ) {\n\ttry {\n\t\tconst files = await readdir( startDir );\n\n\t\tif ( files.includes( 'package.json' ) ) {\n\t\t\treturn startDir;\n\t\t}\n\n\t\tconst dirUp = resolvePath( startDir, '..' );\n\n\t\t// If directory one level up is the same as the current on,\n\t\t// we're at / and there's nowhere to go up.\n\t\tif ( dirUp === startDir ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn resolveProjectRoot( dirUp );\n\t} catch {\n\t\treturn null;\n\t}\n}\n\nexport default resolveProjectRoot;\n","/* eslint-disable no-console */\n\nimport { access } from 'node:fs/promises';\nimport { cwd as processCWD } from 'node:process';\nimport { env as processEnv } from 'node:process';\nimport { pathToFileURL } from 'node:url';\nimport { resolve as resolvePath } from 'pathe';\nimport isBuiltInModule from './utilities/isBuiltInModule.js';\nimport isInsideDir from './utilities/isInsideDir.js';\nimport isInsideNodeModules from './utilities/isInsideNodeModules.js';\nimport resolveConfigFile from './utilities/resolveConfigFile.js';\nimport resolveProjectRoot from './utilities/resolveProjectRoot.js';\nimport loadURL from './utilities/loadURL.js';\n\nconst cwd = processCWD();\nconst resolvedProjectRoot = await resolveProjectRoot( cwd );\n\nif ( !resolvedProjectRoot ) {\n\tconsole.warn( 'ESMLM: The project root was not detected. Falling back to the CWD.' );\n}\n\nconst projectRoot = resolvedProjectRoot || cwd;\nconst loaderFileName = 'ESMLM_CONFIG' in processEnv ? processEnv.ESMLM_CONFIG :\n\tawait resolveConfigFile( cwd, projectRoot );\nconst loaderPath = loaderFileName ? resolvePath( cwd, loaderFileName ) : null;\nlet loaders = [];\n\ntry {\n\tawait access( loaderPath );\n\n\tconst loaderURL = pathToFileURL( loaderPath );\n\tconst { default: config } = await import( loaderURL );\n\n\tloaders = config.loaders;\n} catch {\n\tconsole.warn( 'ESMLM: The file with loaders\\' definition was not found or cannot be accessed.' );\n}\n\nasync function resolve( specifier, context, defaultResolve ) {\n\tconst defaultResolvedInfo = await defaultResolve( specifier, context, defaultResolve );\n\tconst { url: moduleURL } = defaultResolvedInfo;\n\n\tif ( shouldIgnoreModule( projectRoot, defaultResolvedInfo ) ) {\n\t\treturn defaultResolvedInfo;\n\t}\n\n\tconst isAnyLoaderForSpecifier = loaders.some( ( { matcher } ) => {\n\t\treturn matcher( moduleURL, context );\n\t} );\n\n\tif ( !isAnyLoaderForSpecifier ) {\n\t\treturn defaultResolvedInfo;\n\t}\n\n\treturn {\n\t\turl: moduleURL,\n\t\ttype: 'module'\n\t};\n}\n\nasync function load( url, context, defaultLoad ) {\n\tconst moduleInfo = { ...context, url };\n\n\tif ( shouldIgnoreModule( projectRoot, moduleInfo ) ) {\n\t\treturn defaultLoad( url, context, defaultLoad );\n\t}\n\n\tconst matchedLoaders = loaders.filter( ( { matcher } ) => {\n\t\treturn matcher( url, context );\n\t} );\n\n\tif ( matchedLoaders.length === 0 ) {\n\t\treturn defaultLoad( url, context, defaultLoad );\n\t}\n\n\tlet source = await loadURL( url );\n\n\tfor ( const { loader } of matchedLoaders ) {\n\t\tsource = await loader( url, source ); // eslint-disable-line no-await-in-loop\n\t}\n\n\treturn {\n\t\tformat: 'module',\n\t\tshortCircuit: true,\n\t\tsource\n\t};\n}\n\nfunction shouldIgnoreModule( projectRoot, moduleInfo ) {\n\tconst moduleURL = moduleInfo.url;\n\n\treturn isBuiltInModule( moduleInfo ) || isInsideNodeModules( moduleURL ) || !isInsideDir( projectRoot, moduleURL );\n}\n\nexport { resolve };\nexport { load };\n","function isBuiltInModule( { url, format } ) {\n\tif ( format ) {\n\t\treturn format === 'builtin';\n\t}\n\n\treturn url.startsWith( 'node:' );\n}\n\nexport default isBuiltInModule;\n","import { isAbsolute } from 'pathe';\nimport { relative as getRelativePath } from 'pathe';\nimport { fileURLToPath } from 'node:url';\n\nfunction isInsideDir( dir, pathOrURL ) {\n\tconst filePath = pathOrURL.startsWith( 'file://' ) ? fileURLToPath( pathOrURL ) : pathOrURL;\n\tconst relativePath = getRelativePath( dir, filePath );\n\tconst isNotEmptyPath = relativePath.length > 0;\n\tconst isNotOutsideDir = !relativePath.startsWith( '..' );\n\tconst isNotAbsolutePath = !isAbsolute( relativePath );\n\n\t// https://stackoverflow.com/a/45242825/9025529\n\treturn isNotEmptyPath && isNotOutsideDir && isNotAbsolutePath;\n}\n\nexport default isInsideDir;\n"],"names":["test","pathOrURL","cwd$1","readFile","async","resolveProjectRoot","startDir","readdir","includes","dirUp","resolve$1","cwd","resolvedProjectRoot","env","ESMLM_CONFIG","resolveConfigFile","projectRoot","configFileName","configFileExtensions","configFileFullName","files","loaders","console","access","loaderPath","loaderURL","default","config","import","warn","context","defaultResolve","defaultResolvedInfo","specifier","moduleURL","shouldIgnoreModule","matcher","url","type","isAnyLoaderForSpecifier","load","defaultLoad","length","path","fileURLToPath","loader","matchedLoaders","source","format","moduleInfo","shortCircuit","startsWith","dir","relativePath","relative","filePath","getRelativePath","isNotEmptyPath","resolve"],"mappings":";mPAG4BA,OAAMC,QCCjC,QAAUC,IAEHC,QCyBPC,eAAQC,EAAAC,GACP,IAEF,UADCC,EAAAD,IACDE,SAAA,yBC9BK,MAAAC,EAAAC,EAAAJ,EAAA,MAKH,OAAAG,IAAAH,OAIAD,EAAAI,EACA,CAAA,MACA,OAAKA,IACJ,CACD,CFXsBJ,CAAAM,GACxBC,mGGOMD,EAAkB,iBAAAE,EAAAA,EAAAC,mBJVxBV,eAAAW,EAAAT,EAAAU,OEDMC,MAAAA,QAAiBV,EAAAD,GACvB,eAA6BY,EAG5B,CAED,MAAAC,EAAkCb,eAC7B,GAAAc,EAAAZ,SAAAW,GAAA,CAGG,OAFuBb,EAAUA,EAAAa,EAGtC,CAEA,CAIA,GAAAb,IAAAU,EACD,OAAA,KAGA,OAAKV,EADLI,EAAAJ,EAAA,MAEC,CAAA,MACD,OAAA,IAEA,EEdsBS,CAAAJ,EAAAK,GAClBJ,WAAqD,KAE3D,IAAKS,KACJC,UACDC,EAAAC,GAEA,MAAiBC,EAAGb,EAAmBY,IAGvCE,QAAgBC,SACFC,OAAEH,GAGfJ,EAAME,EAAQC,OAEd,CAAA,MACAF,QAAMO,KAAA,gFAAEH,CAAgBtB,eAAkBqB,EAAAA,EAAWK,EAAAC,GAErDV,MAAOW,QAAiBD,EAAAE,EAAAH,EAAAC,QAEjBG,GACRF,EAEA,GAAAG,EAAwBF,EAAkBD,GACnCA,OAAAA,EAON,OANaE,EAAAA,MAAAA,EAAWE,aAGhBJ,IAAmBF,MAKxBO,IAAAH,EAEHI,KAAMC,UAJ4CH,CAMlD,gBAEOI,EAAAH,EAAAP,EAAAW,GACNJ,QAAc,IACdC,EACAD,OAGF,GAAAF,EAA0BL,KACzB,SAAmBO,EAAAP,EAAAW,GAAcJ,MAAAA,EAAAA,EAAAA,QAAAA,EAAKD,aAG9BK,IAAaJ,KAGrB,GAA8B,MAAVK,OAAuBN,OAAAA,EAAAA,EAAAA,EAAAA,GAC1C,2BDjDO/B,GACR,MAAQsC,EAAAC,EAAAP,GACP,OAAAlC,EAAWwC,EACZ,EC8CsBb,GACtB,IAAG,MAAAe,YAGFC,EACDC,QAAAF,EAAAR,EAAAU,GAIcF,MAAAA,CAAQG,gBACrBD,cAAeF,EAChBE,UAGCC,SAAAA,EAAgBhC,EAAAiC,GAChBC,MAAAA,EAAkBD,EAAAZ,IAClBU,qBCpFFV,EAAAW,OAA4BX,IAAgB,OAAAW,EAC7B,cAEdX,EAAAc,WAAA,QAEA,CD+ECJ,CAAAA,IEvEF,gCFuEEA,KC9EF,SAAAK,EAAAnD,0CCFAoD,EAAyBC,IAAcC,GAChCA,EAAoBF,SAAa,EACjCA,GAAeG,EAA+BL,WAAC,MAC/CM,GAAiBJ,EAAmBA,iBAI1C,CFyECN,CAAAA,EAAAA,UAEFP,UAAAkB"}